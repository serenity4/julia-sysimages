precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{getfield(ArgParse, Symbol("#@add_arg_table")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.JLOptions}})
precompile(Tuple{typeof(Base.getproperty), Base.JLOptions, Symbol})
precompile(Tuple{typeof(Base.:(==)), Int8, Int64})
precompile(Tuple{typeof(Base.StackTraces.stacktrace)})
precompile(Tuple{typeof(ArgParse.callframe), Any, Any})
precompile(Tuple{typeof(Base.iterate), Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.StackTraces.StackFrame, 1}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(ArgParse._add_arg_table!), Any, Any})
precompile(Tuple{typeof(Base.splice!), Array{Any, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), GlobalRef, GlobalRef})
precompile(Tuple{getfield(ArgParse, Symbol("#@add_arg_table!")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.all), Function, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#638")), Function, typeof(Base.all), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base._all), getfield(ArgParse, Symbol("#21#22")), Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, DataType}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Char}, Base.Pair{Symbol, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Main.parse_cli)})
precompile(Tuple{typeof(ArgParse.check_prefix_chars), Any})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:help, :action), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{getfield(ArgParse, Symbol("#add_arg_field!##kw")), Any, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{getfield(ArgParse, Symbol("#do_one#19")){ArgParse.ArgParseSettings, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}, getfield(ArgParse, Symbol("#r#18")){ArgParse.ArgParseSettings}}, Any, Any})
precompile(Tuple{typeof(ArgParse.check_arg_name), AbstractString})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(ArgParse.auto_dest_name), AbstractString, Array{AbstractString, 1}, Array{AbstractString, 1}, Bool})
precompile(Tuple{getfield(ArgParse, Symbol("#r#20")){Bool}, Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(ArgParse.get_group), AbstractString, ArgParse.ArgParseField, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.check_dest_name), AbstractString})
precompile(Tuple{typeof(ArgParse.auto_metavar), AbstractString, Bool})
precompile(Tuple{typeof(ArgParse.check_metavar), AbstractString})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{#s15, 1} where #s15<:AbstractString}}, String})
precompile(Tuple{typeof(ArgParse.add_command!), ArgParse.ArgParseSettings, AbstractString, AbstractString, Bool})
precompile(Tuple{typeof(Base.haskey), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, ArgParse.ArgParseSettings, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Function})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, DataType}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, DataType}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :arg_type, :required), T} where T<:Tuple}, Tuple{String, DataType, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, DataType, Bool}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Pair{Symbol, Any}}, Any, Any})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Char}, Base.Pair{Symbol, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Char}, Base.Pair{Symbol, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Char, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :nargs, :help, :arg_type), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Char, String, DataType}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Char, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :nargs, :help, :arg_type), Tuple{Array{Int64, 1}, Char, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :nargs, :help, :arg_type), Tuple{Array{Int64, 1}, Char, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :nargs, :help, :arg_type), Tuple{Array{Int64, 1}, Char, String, DataType}}}})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(ArgParse, Symbol("#do_one#19")){ArgParse.ArgParseSettings, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}, getfield(ArgParse, Symbol("#r#18")){ArgParse.ArgParseSettings}}, Array{String, 1}})
precompile(Tuple{typeof(ArgParse.check_short_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(ArgParse.check_long_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.deepcopy), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Unicode.uppercase), String})
precompile(Tuple{typeof(ArgParse.check_default_type_multi_nargs), Array{T, 1} where T, Type})
precompile(Tuple{typeof(Base.all), Function, Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#638")), Function, typeof(Base.all), Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base._all), getfield(ArgParse, Symbol("#10#11")){DataType}, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(ArgParse.check_range_default_multi), Array{T, 1} where T, Function})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Symbol}, Type{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Union{Nothing, String}}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Union{Nothing, String}}, Nothing, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Union{Nothing, String}}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Union{Nothing, String}}})
precompile(Tuple{Type{NamedTuple{(:default, :help), T} where T<:Tuple}, Tuple{Nothing, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, String}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help), Tuple{Nothing, String}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Union{Nothing, String}, Tuple{Symbol, Symbol}, NamedTuple{(:default, :help), Tuple{Nothing, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Union{Nothing, String}, Tuple{Symbol, Symbol}, NamedTuple{(:default, :help), Tuple{Nothing, String}}}})
precompile(Tuple{Type{NamedTuple{(:default, :help), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help), Tuple{String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:default, :help), Tuple{String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:default, :help), Tuple{String, String}}}})
precompile(Tuple{typeof(Base.deepcopy), String})
precompile(Tuple{typeof(ArgParse.check_default_type), String, Type})
precompile(Tuple{typeof(ArgParse.check_range_default), Any, Function})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :arg_type), T} where T<:Tuple}, Tuple{String, DataType}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :arg_type), Tuple{String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :arg_type), Tuple{String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :arg_type), Tuple{String, DataType}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{String, String, DataType}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{getfield(ArgParse, Symbol("##parse_args#59")), Bool, typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#638")), Function, typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), getfield(ArgParse, Symbol("#66#68")), Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{getfield(Base, Symbol("#485#486")){getfield(ArgParse, Symbol("#67#69")){ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{typeof(ArgParse.preparse!), Base.Channel{T} where T, ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.looks_like_an_option), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(ArgParse.parse1_optarg!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Any, AbstractString})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{AbstractString}, AbstractString})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{getfield(Base, Symbol("##any#636")), Function, typeof(Base.any), Function, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base._any), getfield(ArgParse, Symbol("#70#71")){String}, Array{AbstractString, 1}, Base.Colon})
precompile(Tuple{getfield(ArgParse, Symbol("#70#71")){String}, Any})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{String}, AbstractString})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{Base.Regex}, AbstractString})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Regex, String})
precompile(Tuple{typeof(Base.MainInclude.eval), Symbol})
precompile(Tuple{typeof(Main.print_cli), Base.Dict{String, Any}})
precompile(Tuple{typeof(Main.deflate), Base.Dict{String, Any}})
precompile(Tuple{Type{NamedTuple{(:dest,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(MediaCLI, Symbol("#deflate!##kw")), NamedTuple{(:dest,), Tuple{String}}, typeof(MediaCLI.deflate!), String, Base.Regex})
